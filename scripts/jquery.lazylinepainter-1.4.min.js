/* 
* Lazy Line Painter 1.4
* SVG Stroke animation.
*
* https://github.com/camoconnell/lazy-line-painter
* http://www.camoconnell.com
*
* Copyright 2013 Cam O'Connell
* Licensed under the MIT license.
*  
*/ 

(function(e,t,n){var r="lazyLinePainter";var s={init:function(t){return this.each(function(){var n=e(this),i=n.data(r);n.addClass("lazy-line");if(!i){var s=e.extend({width:null,height:null,strokeWidth:2,strokeColor:"#000",strokeCap:"round",strokeJoin:"round",strokeOpacity:1,strokeDash:null,onComplete:null,delay:null,overrideKey:null},t);var o=s.overrideKey===null?n.attr("id").replace("#",""):s.overrideKey;var u=s.svgData[o].dimensions.width,a=s.svgData[o].dimensions.height;s.svgData=s.svgData[o].strokepath;if(s.width===null)s.width=u;if(s.height===null)s.height=a;var f=n.attr("id");var l=new Raphael(f,u,a);n.data(r,{svgData:s.svgData,width:s.width,height:s.height,strokeWidth:s.strokeWidth,strokeColor:s.strokeColor,strokeCap:s.strokeCap,strokeJoin:s.strokeJoin,strokeOpacity:s.strokeOpacity,strokeDash:s.strokeDash,onComplete:s.onComplete,delay:s.delay,overrideKey:s.overrideKey,paper:l,count:1,complete:false,playhead:0,setTimeOutHandler:[]})}})},paint:function(){return this.each(function(){var t=e(this),n=t.data(r);var i=function(){t.css({width:n.width,height:n.height});e.each(n.svgData,function(e,r){var i=n.paper.path(r.path);i.attr({stroke:"none","stroke-width":n.strokeWidth,"fill-opacity":0});var s=setTimeout(function(){var e=u({count:n.count,canvas:n.paper,pathstr:i,duration:r.duration,attr:o(n,r),callback:function(e){n.setTimeOutHandler.splice(n.count,1);if(n.svgData.length==n.count){n.complete=true;if(n.onComplete!==null)n.onComplete.call(t)}n.count++}})},n.playhead);n.playhead+=r.duration;n.setTimeOutHandler.push(s)})};if(n.delay===null)i();else setTimeout(i,n.delay)})},erase:function(){return this.each(function(){var t=e(this);t.find("svg").empty();d=t.data(r);for(i=0;i<d.setTimeOutHandler.length;i++){clearTimeout(d.setTimeOutHandler[i])}d.playhead=0;d.count=0;d.complete=false})},destroy:function(){return this.each(function(){var t=e(this),n=t.data(r);t.removeData(r);t.remove()})},stamp:function(){return this.each(function(){var t=e(this),n=t.data(r);var s=function(){t.css({width:n.width,height:n.height});for(i=0;i<n.svgData.length;i++){n.paper.path(n.svgData[i].path).attr(o(n,n.svgData[i]))}};if(n.delay===null)s();else setTimeout(s,n.delay)})}};var o=function(e,t){var n={stroke:!t.strokeColor?e.strokeColor:t.strokeColor,"fill-opacity":0,"stroke-dasharray":!t.strokeDash?e.strokeDash:t.strokeDash,"stroke-opacity":!t.strokeOpacity?e.strokeOpacity:t.strokeOpacity,"stroke-width":!t.strokeWidth?e.strokeWidth:t.strokeWidth,"stroke-linecap":!t.strokeCap?e.strokeCap:t.strokeCap,"stroke-linejoin":!t.strokeJoin?e.strokeJoin:t.strokeJoin};return n};var u=function(e){var t=e.canvas,r=e.pathstr,i=e.duration,s=e.attr,o=e.callback;var u;if(typeof r=="string")u=t.path(r).attr({stroke:"none",fill:"none"});else u=r;var a=t.path(u.getSubpath(0,1)).attr(s),f=u.getTotalLength(u),l=u.getPointAtLength(0),c=(new Date).getTime(),h=25;var p=setInterval(function(){var e=(new Date).getTime()-c,t=e/i*f,r=u.getSubpath(0,t);s.path=r;a.animate(s,h);if(e>=i){clearInterval(p);if(o!==n)o();u.remove()}},h)};e.fn.lazylinepainter=function(e){if(s[e]){return s[e].apply(this,Array.prototype.slice.call(arguments,1))}else if(typeof e==="object"||!e){return s.init.apply(this,arguments)}else{}}})(jQuery,window)